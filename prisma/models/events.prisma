/// The core model of the application. An Event is the "what" that users are interested in.
/// It brings together the organizer, venue, and ticketing information.
model Event {
    id          String               @id @default(cuid())
    title       String
    description String
    imageUrl    String
    startTime   DateTime
    endTime     DateTime
    status      EventStatus          @default(DRAFT)
    createdAt   DateTime             @default(now())
    updatedAt   DateTime             @updatedAt
    organizerId String
    venueId     String
    bookings    Booking[]
    categories  CategoriesOnEvents[]
    organizer   OrganizationProfile  @relation(fields: [organizerId], references: [id], onDelete: Cascade)
    venue       Venue                @relation(fields: [venueId], references: [id])
    ticketTypes TicketType[]

    @@index([organizerId])
    @@index([venueId])
    @@index([startTime])
    @@map("events")
    @@schema("public")
}

/// Represents a physical location where an event takes place.
/// Making this a separate model allows for reusability (one venue can host many events)
/// and is essential for the "events near you" feature.
model Venue {
    id         String   @id @default(cuid())
    name       String
    address    String
    city       String
    province   String
    postalCode String?
    country    String
    latitude   Float
    longitude  Float
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    events     Event[]

    @@map("venues")
    @@schema("public")
}

/// A tag or category that can be applied to an event (e.g., "Music", "Tech", "Food").
/// This is used for discovery and filtering.
model Category {
    id     String               @id @default(cuid())
    name   String               @unique
    events CategoriesOnEvents[]

    @@map("categories")
    @@schema("public")
}

/// The join table to create a many-to-many relationship between Events and Categories.
model CategoriesOnEvents {
    eventId    String
    categoryId String
    assignedAt DateTime @default(now())
    category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
    event      Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)

    @@id([eventId, categoryId])
    @@map("categories_on_events")
    @@schema("public")
}
