/// A template for a ticket. Organizers create types of tickets (e.g., "General Admission", "VIP")
/// with a specific price and quantity. This is the inventory for the event.
model TicketType {
    id                String   @id @default(cuid())
    name              String
    price             Decimal  @db.Decimal(10, 2)
    quantity          Int
    availableQuantity Int
    salesStartDate    DateTime
    salesEndDate      DateTime
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    eventId           String
    event             Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
    tickets           Ticket[]

    @@index([eventId])
    @@map("ticket_types")
    @@schema("public")
}

/// The digital "receipt" for a transaction. A Booking represents a user's order
/// for one or more tickets for a single event. It is the central record for a purchase.
model Booking {
    id                      String                     @id @default(cuid())
    status                  BookingStatus              @default(PENDING)
    totalPrice              Decimal                    @db.Decimal(10, 2)
    createdAt               DateTime                   @default(now())
    updatedAt               DateTime                   @updatedAt
    paymentMethod           PaymentOption?
    paymentProofUrl         String?
    paymentIntentId         String?                    @unique
    userId                  String                     @db.Uuid
    eventId                 String
    event                   Event                      @relation(fields: [eventId], references: [id])
    user                    UserProfile                @relation(fields: [userId], references: [id])
    tickets                 Ticket[]
    manualPaymentDetails    ManualPaymentDetails?
    matchedGcashTransaction OrganizerGcashTransaction?

    @@index([userId])
    @@index([eventId])
    @@map("bookings")
    @@schema("public")
}

/// The individual, scannable entry pass. This is the "product" the user receives.
/// A Ticket should ONLY be created AFTER its parent Booking has been successfully paid for
/// and marked as CONFIRMED.
model Ticket {
    id           String       @id @default(cuid())
    qrCodeValue  String       @unique
    status       TicketStatus @default(VALID)
    createdAt    DateTime     @default(now())
    updatedAt    DateTime     @updatedAt
    bookingId    String
    ticketTypeId String
    booking      Booking      @relation(fields: [bookingId], references: [id], onDelete: Cascade)
    ticketType   TicketType   @relation(fields: [ticketTypeId], references: [id])

    @@index([bookingId])
    @@index([ticketTypeId])
    @@map("tickets")
    @@schema("public")
}

// Stores the payment details submitted by the user when they choose manual payment.
// This is the user's side of the proof.
model ManualPaymentDetails {
    bookingId       String   @id
    referenceNumber String
    senderName      String?
    senderNumber    String?
    amountSent      Decimal  @db.Decimal(10, 2)
    paymentDate     DateTime // The date/time user claims they sent the payment
    notes           String? // Optional notes from the user
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)

    @@map("manual_payment_details")
    @@schema("public")
}
