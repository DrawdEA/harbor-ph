/// Represents a user's public-facing profile.
/// This table in the 'public' schema is linked one-to-one with the 'users' table
/// in Supabase's 'auth' schema. It stores all non-sensitive, application-specific user data.
model UserProfile {
  id                String               @id @db.Uuid
  username          String               @unique
  email             String?              @unique
  phone             String?
  firstName         String?
  lastName          String?
  profilePictureUrl String?
  bio               String?
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  bookings          Booking[]
  organizerProfile  OrganizationProfile?
  following         UserFollows[]        @relation("Following")
  followedBy        UserFollows[]        @relation("FollowedBy")

  @@map("user_profiles")
  @@schema("public")
}

/// Represents an event organizer.
/// A user must create an OrganizationProfile to be able to create and manage events.
/// This separation keeps user-specific data and organizer-specific data clean.
model OrganizationProfile {
  id                String                      @id @default(cuid())
  name              String                      @unique
  description       String?
  websiteUrl        String?
  contactEmail      String?
  contactNumber     String?
  isVerified        Boolean                     @default(false)
  createdAt         DateTime                    @default(now())
  updatedAt         DateTime                    @updatedAt
  userId            String                      @unique @db.Uuid
  events            Event[]
  user              UserProfile                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  gcashAccount      GcashAccount[]
  gcashTransactions OrganizerGcashTransaction[]

  @@map("organization_profiles")
  @@schema("public")
}

/// This is an explicit many-to-many join table for the social following system.
/// It allows any UserProfile to follow any other UserProfile.
model UserFollows {
  followerId  String      @db.Uuid
  followingId String      @db.Uuid
  createdAt   DateTime    @default(now())
  follower    UserProfile @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  following   UserProfile @relation("FollowedBy", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId])
  @@map("user_follows")
  @@schema("public")
}

/// Represents a GCash account that an organizer can use to receive payments.
/// An organizer can have one or more accounts.
model GcashAccount {
  id            String   @id @default(cuid())
  accountName   String // e.g., "Juan Dela Cruz"
  accountNumber String // e.g., "09171234567"
  qrCodeUrl     String? // Optional: A URL to the GCash QR code image
  isActive      Boolean  @default(true) // Allows organizer to enable/disable accounts
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  organizationId String?
  organization   OrganizationProfile? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, accountNumber]) // An organizer can't add the same number twice
  @@map("organizer_gcash_accounts")
  @@schema("public")
}

/// Stores transaction records imported by the organizer (e.g., from a GCash statement CSV).
/// This is the organizer's "source of truth" to verify against.
model OrganizerGcashTransaction {
  id              String   @id @default(cuid())
  organizationId  String
  referenceNumber String // The unique reference number from the GCash transaction
  amount          Decimal  @db.Decimal(10, 2)
  senderName      String?
  senderNumber    String?
  timestamp       DateTime // The exact timestamp from the GCash statement

  isMatched        Boolean @default(false) // Prevents a transaction from being used twice
  matchedBookingId String? @unique // A direct link to the booking it was used to verify

  organization OrganizationProfile @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  booking      Booking?            @relation(fields: [matchedBookingId], references: [id], onDelete: SetNull)

  // Ensure a reference number is unique per organizer to prevent duplicates.
  @@unique([organizationId, referenceNumber])
  @@index([organizationId])
  @@map("organizer_gcash_transactions")
  @@schema("public")
}
